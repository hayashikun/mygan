{"version":3,"sources":["IdolPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["IdolPage","hCanvas","dCanvas","useState","model","setModel","imageSize","setImageSize","noise","setNoise","generate","a","length","predict","tf","prediction","data","hContext","getContext","dContext","img","createImageData","i","putImageData","save","scale","canvas","width","height","drawImage","restore","useEffect","tfjs","outputs","shape","Array","inputs","map","_","Math","random","then","style","listStyle","margin","min","max","step","defaultValue","onChange","e","onSliderChange","ref","id","display","border","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.26fc7a8f.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport * as tf from '@tensorflow/tfjs';\nimport Slider from 'rc-slider';\nimport 'rc-slider/assets/index.css';\n\n\nconst IdolPage: React.FC = () => {\n    const [model, setModel]: [tf.LayersModel | null, any] = useState(null);\n    const [imageSize, setImageSize] = useState(0);\n    const [noise, setNoise]: [number[], any] = useState([]);\n\n    let hCanvas: HTMLCanvasElement | null;\n    let dCanvas: HTMLCanvasElement | null;\n\n    useEffect(() => {\n        (async () => {\n            const tfjs = await tf.loadLayersModel(\"/tfjs/model.json\");\n            setModel(tfjs);\n            setImageSize(tfjs.outputs[0].shape[1] || 0);\n            setNoise([...Array(tfjs.inputs[0].shape[1] || 0)].map(\n                (_, i) => i < 8 ? 0 : Math.random() * 4 - 2\n            ));\n        })()\n    }, []);\n\n    useEffect(() => {\n        generate().then();\n    })\n\n\n    async function generate() {\n        if (model == null || imageSize === 0 || noise.length === 0) {\n            return;\n        }\n        const prediction = await model!.predict(tf.tensor2d([noise])) as tf.Tensor;\n        const data = await prediction.data();\n\n        const hContext = hCanvas?.getContext(\"2d\");\n        const dContext = dCanvas?.getContext(\"2d\");\n\n        if (hContext == null || dContext == null) {\n            return;\n        }\n\n        const img = hContext.createImageData(imageSize, imageSize);\n        for (let i = 0; i < imageSize * imageSize; i++) {\n            img.data[i * 4] = data[i * 3] * 255;\n            img.data[i * 4 + 1] = data[i * 3 + 1] * 255;\n            img.data[i * 4 + 2] = data[i * 3 + 2] * 255;\n            img.data[i * 4 + 3] = 255\n        }\n        hContext.putImageData(img, 0, 0);\n\n        dContext.save();\n        dContext.scale(dContext.canvas.width / hContext.canvas.width, dContext.canvas.height / hContext.canvas.height);\n        dContext.drawImage(hCanvas!, 0, 0);\n        dContext.restore();\n    }\n\n    const onSliderChange = (e: number, i: number) => {\n        noise[i] = e;\n        generate().then();\n    }\n\n    return (\n        <div>\n            <h1>Idol generator</h1>\n            <p>{model == null ? \"Model loading...\" : \"Model loaded.\"}</p>\n\n            <ul style={{listStyle: \"none\", width: \"50%\", margin: \"auto\"}}>\n                {[...Array(8)].map(\n                    (_, i) => {\n                        return <li key={\"slider-li-\" + i}>\n                            <Slider min={-5} max={5} step={0.5} defaultValue={0} onChange={e => onSliderChange(e, i)}/>\n                        </li>\n                    })}\n            </ul>\n\n            <div style={{margin: \"8px\"}}>\n                <canvas ref={e => hCanvas = e} id=\"hidden-canvas\" height={imageSize + 'px'} width={imageSize + 'px'}\n                        style={{display: \"none\"}}/>\n                <canvas ref={e => dCanvas = e} id=\"display-canvas\" height=\"400px\" width=\"400px\"\n                        style={{border: \"1px solid black\"}}/>\n            </div>\n        </div>\n    );\n}\n\nexport default IdolPage;\n","import React from 'react';\nimport './App.css';\nimport IdolPage from \"./IdolPage\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <IdolPage/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}